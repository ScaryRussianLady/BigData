%% Script to examine NetCDF data formats and check for non-numeric values (chars only)
clear all
close all

%% Define plain text variable types
DataTypes = {'NC_Byte', 'NC_Char', 'NC_Short', 'NC_Int', 'NC_Float', 'NC_Double'};

NaNErrors = 0;

%% Test File with Errors
%% Set file to test
    FileName = '5011CEM2021balodea2\Model\o3_surface_20180701000000.nc'; % define our test file

    Contents = ncinfo(FileName); % Store the file content information in a variable.
    FileID = netcdf.open(FileName,'NC_NOWRITE'); % open file read only and create handle
    fprintf('Testing files@ %s\n', FileName)
    
    StartLat = 1;
    StartLon = 1;
    
    for idxHour = 1:25
        for idx = 0:size(Contents.Variables,2)-1 % loop through each variable
        % read data type for each variable and store
        [~, datatype(idx+1), ~, ~] = netcdf.inqVar(FileID,idx);
        end
        
        for idxModel = 1:8
        Data(idxModel,:,:) = ncread(FileName, Contents.Variables(idxModel).Name,...
            [StartLat, StartLon, idxHour], [inf, inf, 1]);
        end

        % check for NaNs
        if any(isnan(Data), 'All')
            fprintf('NaNs present during hour %i\n', idxHour)
            NaNErrors = 1;
        end
        
        
        if NaNErrors
            fprintf('NaN errors presents!\n')
        else
            fprintf('No errors!\n')
        end
        
        if any(FindText)
            fprint('2R
    end
    

    

    %% display data types
    DataInFile = DataTypes(datatype)'

    %% find character data types
    FindText = strcmp('NC_Char', DataInFile);

    %% print results
    fprintf('Testing file: %s\n', FileName)
    if any(FindText)
        fprintf('Error, text variables present:\n')
    else
        fprintf('All data is numeric, continue analysis.\n')
    end

